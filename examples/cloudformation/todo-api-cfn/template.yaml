AWSTemplateFormatVersion: 2010-09-09
Description: An AppSync API with JavaScript resolvers with a DynamoDB data source
Resources:
  TodoAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: API_KEY
      Name: SimpleTodoAPI
  TodoAPISchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
      Definition: |
        input CreateTodoInput {
          title: String
          description: String
          owner: String
        }

        input DeleteTodoInput {
          id: ID!
        }

        type Mutation {
          createTodo(input: CreateTodoInput!): Todo
          updateTodo(input: UpdateTodoInput!): Todo
          deleteTodo(input: DeleteTodoInput!): Todo
        }

        type Query {
          getTodo(id: ID!): Todo
          listTodos(filter: TableTodoFilterInput, limit: Int, nextToken: String): TodoConnection
          queryTodosByOwnerIndex(owner: String!, first: Int, after: String): TodoConnection
        }

        type Subscription {
          onCreateTodo(id: ID, title: String, description: String, owner: String): Todo @aws_subscribe(mutations: ["createTodo"])
          onUpdateTodo(id: ID, title: String, description: String, owner: String): Todo @aws_subscribe(mutations: ["updateTodo"])
          onDeleteTodo(id: ID, title: String, description: String, owner: String): Todo @aws_subscribe(mutations: ["deleteTodo"])
        }

        input TableBooleanFilterInput {
          ne: Boolean
          eq: Boolean
        }

        input TableFloatFilterInput {
          ne: Float
          eq: Float
          le: Float
          lt: Float
          ge: Float
          gt: Float
          contains: Float
          notContains: Float
          between: [Float]
        }

        input TableIDFilterInput {
          ne: ID
          eq: ID
          le: ID
          lt: ID
          ge: ID
          gt: ID
          contains: ID
          notContains: ID
          between: [ID]
          beginsWith: ID
        }

        input TableIntFilterInput {
          ne: Int
          eq: Int
          le: Int
          lt: Int
          ge: Int
          gt: Int
          contains: Int
          notContains: Int
          between: [Int]
        }

        input TableStringFilterInput {
          ne: String
          eq: String
          le: String
          lt: String
          ge: String
          gt: String
          contains: String
          notContains: String
          between: [String]
          beginsWith: String
        }

        input TableTodoFilterInput {
          id: TableIDFilterInput
          title: TableStringFilterInput
          description: TableStringFilterInput
          owner: TableStringFilterInput
        }

        type Todo {
          id: ID!
          title: String
          description: String
          owner: String
        }

        type TodoConnection {
          items: [Todo]
          nextToken: String
        }

        input UpdateTodoInput {
          id: ID!
          title: String
          description: String
          owner: String
        }
  DefaultAPIKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
    DependsOn:
      - TodoAPISchema
  DataSourceServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
        Version: '2012-10-17'
  ServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - !GetAtt TodoTable.Arn
              - Fn::Join:
                  - ''
                  - - !GetAtt TodoTable.Arn
                    - /index/*
        Version: '2012-10-17'
      PolicyName: ServiceRoleDefaultPolicy
      Roles:
        - !Ref DataSourceServiceRole
  TodoTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
      Name: table
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref TodoTable
      ServiceRoleArn: !GetAtt DataSourceServiceRole.Arn
  CreateTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
      FieldName: createTodo
      TypeName: Mutation
      DataSourceName: table
      Runtime:
        Name: 'APPSYNC_JS'
        RuntimeVersion: '1.0.0'
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          const { input: values } = ctx.arguments;
          const key = { id: util.autoId() };
          const condition = { and: [{ id: { attributeExists: false } }] };
          console.log('--> create todo with requested values: ', values);
          return dynamodbPutRequest({ key, values, condition });
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            return util.error(error.message, error.type, result);
          }
          return ctx.result;
        }

        /**
        * Helper function to create a new item
        * @returns a PutItem request
        */
        function dynamodbPutRequest({ key, values, condition: inCondObj }) {
          const condition = JSON.parse(util.transform.toDynamoDBConditionExpression(inCondObj));
          if (condition.expressionValues && !Object.keys(condition.expressionValues).length) {
            delete condition.expressionValues;
          }
          return {
            operation: 'PutItem',
            key: util.dynamodb.toMapValues(key),
            attributeValues: util.dynamodb.toMapValues(values),
            condition,
          };
        }
    DependsOn:
      - TodoAPISchema
      - TodoTableDataSource
  UpdateTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
      FieldName: updateTodo
      TypeName: Mutation
      DataSourceName: table
      Runtime:
        Name: 'APPSYNC_JS'
        RuntimeVersion: '1.0.0'
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          const {
            input: { id, ...values },
          } = ctx.args;
          const condition = { id: { attributeExists: true } };
          return dynamodbUpdateRequest({ key: { id }, values, condition });
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            return util.error(error.message, error.type, result);
          }
          return result;
        }

        function dynamodbUpdateRequest({ key, values, condition: inCondObj }) {
          const sets = [];
          const removes = [];
          const expressionNames = {};
          const expValues = {};

          for (const [k, v] of Object.entries(values)) {
            expressionNames[`#${k}`] = k;
            if (v) {
              sets.push(`#${k} = :${k}`);
              expValues[`:${k}`] = v;
            } else {
              removes.push(`#${k}`);
            }
          }

          console.log(`SET: ${sets.length}, REMOVE: ${removes.length}`);

          let expression = sets.length ? `SET ${sets.join(', ')}` : '';
          expression += removes.length ? ` REMOVE ${removes.join(', ')}` : '';

          console.log('update expression', expression);

          const condition = JSON.parse(util.transform.toDynamoDBConditionExpression(inCondObj));

          if (condition.expressionValues && !Object.keys(condition.expressionValues).length) {
            delete condition.expressionValues;
          }

          return {
            operation: 'UpdateItem',
            key: util.dynamodb.toMapValues(key),
            condition,
            update: {
              expression,
              expressionNames,
              expressionValues: util.dynamodb.toMapValues(expValues),
            },
          };
        }
    DependsOn:
      - TodoAPISchema
      - TodoTableDataSource
  DeleteTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
      FieldName: deleteTodo
      TypeName: Mutation
      DataSourceName: table
      Runtime:
        Name: 'APPSYNC_JS'
        RuntimeVersion: '1.0.0'
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          return {
            operation: 'DeleteItem',
            key: util.dynamodb.toMapValues({id: ctx.args.input.id}),
          };
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            return util.error(error.message, error.type, result);
          }
          return ctx.result;
        }
    DependsOn:
      - TodoAPISchema
      - TodoTableDataSource
  GetTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
      FieldName: getTodo
      TypeName: Query
      DataSourceName: table
      Runtime:
        Name: 'APPSYNC_JS'
        RuntimeVersion: '1.0.0'
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          return {
            operation: 'GetItem',
            key: util.dynamodb.toMapValues({ id: ctx.args.id}),
          };
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            return util.error(error.message, error.type, result);
          }
          return ctx.result;
        }
    DependsOn:
      - TodoAPISchema
      - TodoTableDataSource
  ListTodosResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
      FieldName: listTodos
      TypeName: Query
      DataSourceName: table
      Runtime:
        Name: 'APPSYNC_JS'
        RuntimeVersion: '1.0.0'
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          const { filter: f, limit = 20, nextToken } = ctx.args;
          const filter = f ? JSON.parse(util.transform.toDynamoDBFilterExpression(f)) : null;
          return { operation: 'Scan', filter, limit, nextToken };
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            return util.error(error.message, error.type, result);
          }
          const { items = [], nextToken } = result;
          return { items, nextToken };
        }
    DependsOn:
      - TodoAPISchema
      - TodoTableDataSource
  QueryTodosResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt TodoAPI.ApiId
      FieldName: queryTodosByOwnerIndex
      TypeName: Query
      DataSourceName: table
      Runtime:
        Name: 'APPSYNC_JS'
        RuntimeVersion: '1.0.0'
      Code: |
        import { util } from '@aws-appsync/utils';

        export function request(ctx) {
          const { owner, first = 20, after } = ctx.args;
          return dynamodbQueryRequest('owner', owner, 'owner-index', first, after);
        }

        export function response(ctx) {
          const { error, result } = ctx;
          if (error) {
            return util.error(error.message, error.type, result);
          }
          return result;
        }

        function dynamodbQueryRequest(key, value, index, limit, nextToken) {
          const expression = `#key = :key`;
          const expressionNames = { '#key': key };
          const expressionValues = util.dynamodb.toMapValues({ ':key': value });
          return {
            operation: 'Query',
            query: { expression, expressionNames, expressionValues },
            index,
            limit,
            nextToken,
            scanIndexForward: true,
            select: 'ALL_ATTRIBUTES',
          };
        }
    DependsOn:
      - TodoAPISchema
      - TodoTableDataSource
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: owner
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: owner-index
          KeySchema:
            - AttributeName: owner
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
